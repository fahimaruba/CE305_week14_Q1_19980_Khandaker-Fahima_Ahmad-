init_storage = {}
data_alpha = {800: 123}
data_beta = {900: 1000}

def modify_storage(storage, element):
    storage.update(element)
    return storage

storage_state = modify_storage(init_storage, data_alpha)  # storage_state = {800: 123}
print("storage_state =", storage_state)
storage_state = modify_storage(storage_state, data_beta)  # storage_state = {800: 123, 900: 1000}
print("storage_state =", storage_state)

data_gamma = {800: 900}
storage_state = modify_storage(storage_state, data_gamma)  # storage_state = {800: 900, 900: 1000}
print("storage_state =", storage_state)

data_delta = {1500: 700}
storage_state = modify_storage(storage_state, data_delta)  # storage_state = {800: 900, 900: 1000, 1500: 700}
print("storage_state =", storage_state)

def get_immediate_value(val):  # Load accumulator(ac) by immediate addressing
    return val

accumulator_val = get_immediate_value(800)  # accumulator_val = 800
print("accumulator_val =", accumulator_val)

def get_direct_value(storage, val):  # Load accumulator(ac) by direct addressing
    return storage.get(val, None)

accumulator_val = get_direct_value(storage_state, 800)  # accumulator_val = 900
print("accumulator_val =", accumulator_val)

def get_indirect_value(storage, val):  # Load accumulator(ac) by indirect addressing
    indirect_address = storage.get(val, None)
    if indirect_address is not None:
        return storage.get(indirect_address, None)
    return None

accumulator_val = get_indirect_value(storage_state, 800)  # accumulator_val = 1000
print("accumulator_val =", accumulator_val)

def get_indexed_value(storage, index, val):
    index_address = storage.get(val, 700) + index
    return storage.get(index_address, 700)

index_reg = 700
accumulator_val = get_indexed_value(storage_state, index_reg, 800)  # accumulator_val = 700
print("accumulator_val =", accumulator_val)
